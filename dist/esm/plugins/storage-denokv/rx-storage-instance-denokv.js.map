{"version":3,"file":"rx-storage-instance-denokv.js","names":["Subject","getPrimaryFieldOfPrimaryKey","addRxStorageMultiInstanceSupport","CLEANUP_INDEX","DENOKV_DOCUMENT_ROOT_PATH","RX_STORAGE_NAME_DENOKV","getDenoGlobal","getDenoKVIndexName","getIndexableStringMonad","getStartIndexStringFromLowerBound","changeIndexableStringByOneQuantum","appendToArray","batchArray","lastOfArray","toArray","ensureNotFalsy","randomCouchString","categorizeBulkWriteRows","now","queryDenoKV","INDEX_MAX","PROMISE_RESOLVE_VOID","flatClone","RxStorageInstanceDenoKV","storage","databaseName","collectionName","schema","internals","options","settings","keySpace","version","join","kvOptions","consistency","consistencyLevel","changes$","primaryPath","primaryKey","kvPromise","openKv","openKvPath","then","kv","set","_proto","prototype","bulkWrite","documentWrites","context","_this","ret","success","error","eventBulkId","eventBulk","id","events","checkpoint","batches","batchSize","writeBatch","_loop","writeBlockKey","get","docsInDB","Map","readManyBatches","Promise","all","map","readManyBatch","docsResult","getMany","writeRow","docId","document","row","docData","value","categorized","tx","atomic","check","bulkInsertDocs","forEach","push","Object","values","indexes","indexMeta","indexString","getIndexableString","indexId","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","txResult","commit","ok","errors","length","lastEvent","documentData","lwt","_meta","next","findDocumentsById","ids","withDeleted","kvKey","findSingleResult","docInDb","_deleted","query","preparedQuery","count","result","documents","mode","info","range","list","start","end","totalCount","res","getAttachmentData","documentId","attachmentId","digest","Error","getChangedDocumentsSince","limit","index","indexName","lowerBoundString","checkpointPartialDoc","docIds","batch","docs","lastDoc","changeStream","asObservable","cleanup","minimumDeletedTime","_this2","maxDeletionTime","upperBoundString","noMoreUndeleted","rangeCount","_loop2","docDataResult","indexMetaInner","close","closed","complete","remove","ensureNotClosed","promises","key","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDenoKVStorageInstance","params","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","unshift","instance","resolve"],"sources":["../../../../src/plugins/storage-denokv/rx-storage-instance-denokv.ts"],"sourcesContent":["\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    RxStorageInfoResult,\n    PreparedQuery,\n    RxConflictResultionTask\n} from '../../types/index.d.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport type { DenoKVIndexMeta, DenoKVPreparedQuery, DenoKVSettings, DenoKVStorageInternals } from './denokv-types.ts';\nimport { RxStorageDenoKV } from './index.ts';\nimport { CLEANUP_INDEX, DENOKV_DOCUMENT_ROOT_PATH, RX_STORAGE_NAME_DENOKV, getDenoGlobal, getDenoKVIndexName } from \"./denokv-helper.ts\";\nimport { getIndexableStringMonad, getStartIndexStringFromLowerBound, changeIndexableStringByOneQuantum } from \"../../custom-index.ts\";\nimport { appendToArray, batchArray, lastOfArray, toArray } from \"../utils/utils-array.ts\";\nimport { ensureNotFalsy } from \"../utils/utils-other.ts\";\nimport { randomCouchString } from \"../utils/utils-string.ts\";\nimport { categorizeBulkWriteRows, getUniqueDeterministicEventKey } from \"../../rx-storage-helper.ts\";\nimport { now } from \"../utils/utils-time.ts\";\nimport { newRxError } from \"../../rx-error.ts\";\nimport { queryDenoKV } from \"./denokv-query.ts\";\nimport { INDEX_MAX } from \"../../query-planner.ts\";\nimport { PROMISE_RESOLVE_VOID } from \"../utils/utils-promise.ts\";\nimport { flatClone } from \"../utils/utils-object.ts\";\n\n\n\nexport class RxStorageInstanceDenoKV<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DenoKVStorageInternals<RxDocType>,\n    DenoKVSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public closed?: Promise<void>;\n    public readonly kvPromise: Promise<any>;\n\n    constructor(\n        public readonly storage: RxStorageDenoKV,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DenoKVStorageInternals<RxDocType>,\n        public readonly options: Readonly<DenoKVSettings>,\n        public readonly settings: DenoKVSettings,\n        public readonly keySpace = ['rxdb', databaseName, collectionName, schema.version].join('|'),\n        public readonly kvOptions = { consistency: settings.consistencyLevel }\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.kvPromise = getDenoGlobal().openKv(settings.openKvPath).then(async (kv: any) => {\n            // insert writeBlockKey\n            await kv.set([this.keySpace], 1);\n            return kv;\n        });\n    }\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[], context: string): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const kv = await this.kvPromise;\n        const primaryPath = this.primaryPath;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n        const eventBulkId = randomCouchString(10);\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n            id: eventBulkId,\n            events: [],\n            checkpoint: null,\n            context\n        };\n\n\n        const batches = batchArray(documentWrites, ensureNotFalsy(this.settings.batchSize));\n\n        /**\n         * DenoKV does not have transactions\n         * so we use a special writeBlock row to ensure\n         * atomic writes (per document)\n         * and so that we can do bulkWrites\n         */\n        for (const writeBatch of batches) {\n            while (true) {\n                const writeBlockKey = await kv.get([this.keySpace], this.kvOptions);\n                const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n\n                /**\n                 * TODO the max amount for .getMany() is 10 which is defined by deno itself.\n                 * How can this be increased?\n                 */\n                const readManyBatches = batchArray(writeBatch, 10);\n                await Promise.all(\n                    readManyBatches.map(async (readManyBatch) => {\n                        const docsResult = await kv.getMany(\n                            readManyBatch.map(writeRow => {\n                                const docId: string = writeRow.document[primaryPath] as any;\n                                return [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                            })\n                        );\n                        docsResult.map((row: any) => {\n                            const docData = row.value;\n                            if (!docData) {\n                                return;\n                            }\n                            const docId: string = docData[primaryPath] as any;\n                            docsInDB.set(docId, docData);\n                        });\n                    })\n                );\n                const categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDB,\n                    writeBatch,\n                    context\n                );\n\n                let tx = kv.atomic();\n                tx = tx.set([this.keySpace], ensureNotFalsy(writeBlockKey.value) + 1);\n                tx = tx.check(writeBlockKey);\n\n                // INSERTS\n                categorized.bulkInsertDocs.forEach(writeRow => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n                    ret.success.push(writeRow.document);\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                        tx = tx.set([this.keySpace, indexMeta.indexId, indexString], docId);\n                    });\n                });\n                // UPDATES\n                categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                        const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                        if (oldIndexString !== newIndexString) {\n                            tx = tx.delete([this.keySpace, indexMeta.indexId, oldIndexString]);\n                            tx = tx.set([this.keySpace, indexMeta.indexId, newIndexString], docId);\n                        }\n                    });\n                    ret.success.push(writeRow.document as any);\n                });\n\n                const txResult = await tx.commit();\n                if (txResult.ok) {\n                    appendToArray(ret.error, categorized.errors);\n                    appendToArray(eventBulk.events, categorized.eventBulk.events);\n                    break;\n                }\n            }\n        }\n\n        if (eventBulk.events.length > 0) {\n            const lastEvent = ensureNotFalsy(lastOfArray(eventBulk.events));\n            eventBulk.checkpoint = {\n                id: lastEvent.documentData[this.primaryPath],\n                lwt: lastEvent.documentData._meta.lwt\n            };\n            this.changes$.next(eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const kv = await this.kvPromise;\n        const ret: RxDocumentData<RxDocType>[] = [];\n        await Promise.all(\n            ids.map(async (docId) => {\n                const kvKey = [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                const findSingleResult = await kv.get(kvKey, this.kvOptions);\n                const docInDb = findSingleResult.value;\n                if (\n                    docInDb &&\n                    (\n                        !docInDb._deleted ||\n                        withDeleted\n                    )\n                ) {\n                    ret.push(docInDb);\n                }\n            })\n        );\n        return ret;\n    }\n    query(preparedQuery: DenoKVPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryDenoKV(this, preparedQuery);\n    }\n    async count(preparedQuery: DenoKVPreparedQuery<RxDocType>): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2023), DenoKV does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/denoland/deno/issues/18965\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async info(): Promise<RxStorageInfoResult> {\n        const kv = await this.kvPromise;\n        const range = kv.list({\n            start: [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH],\n            end: [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, INDEX_MAX]\n        }, this.kvOptions);\n        let totalCount = 0;\n        for await (const res of range) {\n            totalCount++;\n        }\n        return {\n            totalCount\n        };\n    }\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint | undefined): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const kv = await this.kvPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getDenoKVIndexName(index);\n        const indexMeta = this.internals.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n            lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\n        }\n\n        const range = kv.list({\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n            end: [this.keySpace, indexMeta.indexId, INDEX_MAX]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            limit,\n            batchSize: this.settings.batchSize\n        });\n        const docIds: any[] = [];\n        for await (const row of range) {\n            const docId = row.value;\n            docIds.push([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n        }\n\n        /**\n         * We have to run in batches because without it says\n         * \"TypeError: too many ranges (max 10)\"\n         */\n        const batches = batchArray(docIds, 10);\n        const result: RxDocumentData<RxDocType>[] = [];\n\n        for (const batch of batches) {\n            const docs = await kv.getMany(batch);\n            docs.forEach((row: any) => {\n                const docData = row.value;\n                result.push(docData as any);\n            });\n        }\n\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream() {\n        return this.changes$.asObservable();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const kv = await this.kvPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getDenoKVIndexName(index);\n        const indexMeta = this.internals.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n\n        const range = kv.list({\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n            end: [this.keySpace, indexMeta.indexId, upperBoundString]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize,\n            limit: this.settings.batchSize\n        });\n\n        let rangeCount = 0;\n        for await (const row of range) {\n            rangeCount = rangeCount + 1;\n            const docId = row.value;\n            const docDataResult = await kv.get([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], this.kvOptions);\n            const docData = ensureNotFalsy(docDataResult.value);\n            if (\n                !docData._deleted ||\n                docData._meta.lwt > maxDeletionTime\n            ) {\n                continue;\n            }\n\n\n            let tx = kv.atomic();\n            tx = tx.check(docDataResult);\n            tx = tx.delete([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n            Object\n                .values(this.internals.indexes)\n                .forEach(indexMetaInner => {\n                    tx = tx.delete([this.keySpace, indexMetaInner.indexId, docId]);\n                });\n            await tx.commit();\n        }\n        return noMoreUndeleted;\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            const kv = await this.kvPromise;\n            await kv.close();\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const kv = await this.kvPromise;\n        const range = kv.list({\n            start: [this.keySpace],\n            end: [this.keySpace, INDEX_MAX]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize\n        });\n        let promises: Promise<any>[] = [];\n        for await (const row of range) {\n            promises.push(kv.delete(row.key));\n        }\n\n        await Promise.all(promises);\n        return this.close();\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\n\n\nexport function createDenoKVStorageInstance<RxDocType>(\n    storage: RxStorageDenoKV,\n    params: RxStorageInstanceCreationParams<RxDocType, DenoKVSettings>,\n    settings: DenoKVSettings\n): Promise<RxStorageInstanceDenoKV<RxDocType>> {\n    settings = flatClone(settings);\n    if (!settings.batchSize) {\n        settings.batchSize = 100;\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const indexDBs: { [indexName: string]: DenoKVIndexMeta<RxDocType>; } = {};\n    const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n    useIndexes.push([primaryPath]);\n    const useIndexesFinal = useIndexes.map(index => {\n        const indexAr = toArray(index);\n        indexAr.unshift('_deleted');\n        return indexAr;\n    });\n    // used for `getChangedDocumentsSince()`\n    useIndexesFinal.push([\n        '_meta.lwt',\n        primaryPath\n    ]);\n    useIndexesFinal.push(CLEANUP_INDEX);\n    useIndexesFinal.forEach((indexAr, indexId) => {\n        const indexName = getDenoKVIndexName(indexAr);\n        indexDBs[indexName] = {\n            indexId: '|' + indexId + '|',\n            indexName,\n            getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n            index: indexAr\n        };\n    });\n\n    const internals = {\n        indexes: indexDBs\n    };\n    const instance = new RxStorageInstanceDenoKV(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DENOKV,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDenoKV<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDenoKV is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}