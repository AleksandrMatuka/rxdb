{"version":3,"file":"index.js","names":["BehaviorSubject","filter","firstValueFrom","map","Subject","addRxPlugin","rxStorageInstanceToReplicationHandler","ensureNotFalsy","getFromMapOrThrow","randomCouchString","RxDBLeaderElectionPlugin","replicateRxCollection","isMasterInWebRTCReplication","sendMessageAndAwaitAnswer","newRxError","replicateWebRTC","options","collection","pull","batchSize","push","database","multiInstance","waitForLeadership","requestCounter","requestFlag","getRequestId","count","token","storageToken","pool","RxWebRTCReplicationPool","connectionHandlerCreator","subs","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","data","message","method","send","id","result","connectSub","connect$","canceled","peerToken","tokenResponse","params","error","isMaster","hashFunction","replicationState","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","Object","assign","handler","lastPulledCheckpoint","answer","stream$","response$","m","undefined","docs","addPeer","peerStates$","Map","onDestroy","cancel","storageInstance","conflictHandler","_proto","prototype","peerState","getValue","set","delete","forEach","sub","awaitFirstPeer","peerStates","size","Array","from","keys","destroy"],"sources":["../../../../src/plugins/replication-webrtc/index.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    filter,\n    firstValueFrom,\n    map,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol/index.ts';\nimport type {\n    RxCollection,\n    RxError,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxTypeError\n} from '../../types/index.d.ts';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../plugins/utils/index.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport { replicateRxCollection } from '../replication/index.ts';\nimport {\n    isMasterInWebRTCReplication,\n    sendMessageAndAwaitAnswer\n} from './webrtc-helper.ts';\nimport type {\n    WebRTCConnectionHandler,\n    WebRTCPeer,\n    WebRTCPeerState,\n    WebRTCReplicationCheckpoint,\n    WebRTCResponse,\n    RxWebRTCReplicationState,\n    SyncOptionsWebRTC\n} from './webrtc-types.ts';\nimport { newRxError } from '../../rx-error.ts';\n\n\nexport async function replicateWebRTC<RxDocType>(\n    options: SyncOptionsWebRTC<RxDocType>\n): Promise<RxWebRTCReplicationPool<RxDocType>> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    // fill defaults\n    if (options.pull) {\n        if (!options.pull.batchSize) {\n            options.pull.batchSize = 20;\n        }\n    }\n    if (options.push) {\n        if (!options.push.batchSize) {\n            options.push.batchSize = 20;\n        }\n    }\n\n    if (collection.database.multiInstance) {\n        await collection.database.waitForLeadership();\n    }\n\n    // used to easier debug stuff\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const storageToken = await collection.database.storageToken;\n    const pool = new RxWebRTCReplicationPool(\n        collection,\n        options,\n        await options.connectionHandlerCreator(options)\n    );\n\n\n    pool.subs.push(\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\n    );\n\n    /**\n     * Answer if someone requests our storage token\n     */\n    pool.subs.push(\n        pool.connectionHandler.message$.pipe(\n            filter(data => data.message.method === 'token')\n        ).subscribe(data => {\n            pool.connectionHandler.send(data.peer, {\n                id: data.message.id,\n                result: storageToken\n            });\n        })\n    );\n\n    const connectSub = pool.connectionHandler.connect$\n        .pipe(\n            filter(() => !pool.canceled)\n        )\n        .subscribe(async (peer) => {\n            let peerToken: string;\n            /**\n             * TODO ensure both know the correct secret\n             */\n            try {\n                const tokenResponse = await sendMessageAndAwaitAnswer(\n                    pool.connectionHandler,\n                    peer,\n                    {\n                        id: getRequestId(),\n                        method: 'token',\n                        params: []\n                    }\n                );\n                peerToken = tokenResponse.result;\n            } catch (error: any) {\n                /**\n                 * If could not get the tokenResponse,\n                 * just ignore that peer.\n                 */\n                pool.error$.next(newRxError('RC_WEBRTC_PEER', {\n                    error\n                }));\n                return;\n            }\n            const isMaster = await isMasterInWebRTCReplication(collection.database.hashFunction, storageToken, peerToken);\n\n            let replicationState: RxWebRTCReplicationState<RxDocType> | undefined;\n            if (isMaster) {\n                const masterHandler = pool.masterReplicationHandler;\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: WebRTCResponse = {\n                        id: 'masterChangeStream$',\n                        result: ev\n                    };\n                    pool.connectionHandler.send(peer, streamResponse);\n                });\n\n                // clean up the subscription\n                pool.subs.push(\n                    masterChangeStreamSub,\n                    pool.connectionHandler.disconnect$.pipe(\n                        filter(p => p.id === peer.id)\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\n                );\n\n                const messageSub = pool.connectionHandler.message$\n                    .pipe(\n                        filter(data => data.peer.id === peer.id),\n                        filter(data => data.message.method !== 'token')\n                    )\n                    .subscribe(async (data) => {\n                        const { peer: msgPeer, message } = data;\n                        /**\n                         * If it is not a function,\n                         * it means that the client requested the masterChangeStream$\n                         */\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\n                        const result = await (method as any)(...message.params);\n                        const response: WebRTCResponse = {\n                            id: message.id,\n                            result\n                        };\n                        pool.connectionHandler.send(msgPeer, response);\n                    });\n                pool.subs.push(messageSub);\n            } else {\n                replicationState = replicateRxCollection({\n                    replicationIdentifier: [collection.name, options.topic, peerToken].join('||'),\n                    collection: collection,\n                    autoStart: true,\n                    deletedField: '_deleted',\n                    live: true,\n                    retryTime: options.retryTime,\n                    waitForLeadership: false,\n                    pull: options.pull ? Object.assign({}, options.pull, {\n                        async handler(lastPulledCheckpoint: WebRTCReplicationCheckpoint | undefined) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterChangesSince',\n                                    params: [\n                                        lastPulledCheckpoint,\n                                        ensureNotFalsy(options.pull).batchSize\n                                    ],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        },\n                        stream$: pool.connectionHandler.response$.pipe(\n                            filter(m => m.response.id === 'masterChangeStream$'),\n                            map(m => m.response.result)\n                        )\n\n                    }) : undefined,\n                    push: options.push ? Object.assign({}, options.push, {\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterWrite',\n                                    params: [docs],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        }\n                    }) : undefined\n                });\n            }\n            pool.addPeer(peer, replicationState);\n        });\n    pool.subs.push(connectSub);\n    return pool;\n}\n\n\n/**\n * Because the WebRTC replication runs between many instances,\n * we use a Pool instead of returning a single replication state.\n */\nexport class RxWebRTCReplicationPool<RxDocType> {\n\n    peerStates$: BehaviorSubject<Map<WebRTCPeer, WebRTCPeerState<RxDocType>>> = new BehaviorSubject(new Map());\n    canceled: boolean = false;\n    masterReplicationHandler: RxReplicationHandler<RxDocType, WebRTCReplicationCheckpoint>;\n    subs: Subscription[] = [];\n\n    public error$ = new Subject<RxError | RxTypeError>();\n\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly options: SyncOptionsWebRTC<RxDocType>,\n        public readonly connectionHandler: WebRTCConnectionHandler\n    ) {\n        this.collection.onDestroy.push(() => this.cancel());\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\n            collection.storageInstance,\n            collection.conflictHandler,\n            collection.database.token,\n        );\n    }\n\n    addPeer(\n        peer: WebRTCPeer,\n        replicationState?: RxWebRTCReplicationState<RxDocType>\n    ) {\n        const peerState: WebRTCPeerState<RxDocType> = {\n            peer,\n            replicationState,\n            subs: []\n        };\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\n        if (replicationState) {\n            peerState.subs.push(\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\n            );\n        }\n    }\n    removePeer(peer: WebRTCPeer) {\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\n        this.peerStates$.getValue().delete(peer);\n        this.peerStates$.next(this.peerStates$.getValue());\n        peerState.subs.forEach(sub => sub.unsubscribe());\n        if (peerState.replicationState) {\n            peerState.replicationState.cancel();\n        }\n    }\n\n    // often used in unit tests\n    awaitFirstPeer() {\n        return firstValueFrom(\n            this.peerStates$.pipe(\n                filter(peerStates => peerStates.size > 0)\n            )\n        );\n    }\n\n    public async cancel() {\n        if (this.canceled) {\n            return;\n        }\n        this.canceled = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\n            this.removePeer(peer);\n        });\n        await this.connectionHandler.destroy();\n    }\n}\n\nexport * from './webrtc-helper.ts';\nexport * from './signaling-server.ts';\nexport * from './webrtc-types.ts';\n// export * from './connection-handler-webtorrent';\n// export * from './connection-handler-p2pcf';\nexport * from './connection-handler-simple-peer.ts';\n"],"mappings":"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"}