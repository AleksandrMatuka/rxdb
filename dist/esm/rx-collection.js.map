{"version":3,"file":"rx-collection.js","names":["filter","map","mergeMap","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","fillObjectDataBeforeInsert","createRxCollectionStorageInstance","removeCollectionStorages","ensureRxCollectionIsNotDestroyed","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","DocumentCache","mapDocumentsDataToCacheDocs","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createNewRxDocument","getRxDocumentConstructor","getWrappedStorageInstance","throwIfIsStorageWriteError","defaultConflictHandler","IncrementalWriteQueue","beforeDocumentUpdateWrite","overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","conflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","_incrementalUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","$","checkpoint$","_changeEventBuffer","onDestroy","destroyed","onRemove","_applyHookFunctions","asRxCollection","_proto","prototype","prepare","jsonSchema","primaryPath","newData","oldData","result","_runHooks","collectionEventBulks$","eventBulks$","pipe","changeEventBulk","collectionName","events","checkpoint","documentConstructor","cE","isLocal","docData","listenToRemoveSub","internalStore","changeStream","bulk","key","version","found","find","event","documentData","context","operation","subscribe","destroy","Promise","all","fn","push","databaseStorageToken","storageToken","subDocs","eventBulk","Array","length","rawEvents","deepFreezeWhenDevMode","index","documentId","previousDocumentData","id","internal","databaseToken","token","endTime","startTime","$emit","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","cleanup","_minimumDeletedTime","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","insertResult","success","docsData","insertRows","hasHooks","useDocData","document","results","bulkWrite","rxDocuments","docsMap","forEach","row","doc","set","get","primary","bulkRemove","ids","rxDocumentMap","findByIds","exec","from","values","rxDocument","data","toMutableJSON","removeDocs","writeDoc","_deleted","previous","successIds","d","bulkUpsert","insertData","useJsonByDocId","useJson","slice","err","status","writeData","docDataInDb","documentInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","queryObj","query","findOne","isArray","selector","limit","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addHook","when","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","_runHooksSync","promiseWait","time","ret","res","timeout","setTimeout","delete","add","clearTimeout","requestIdlePromise","close","sub","unsubscribe","collections","remove","storage","password","hashFunction","_createClass","collection","colProto","Object","getPrototypeOf","fnName","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","devMode","isDevMode","entries","funName","defineProperty","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    map,\n    mergeMap\n} from 'rxjs';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from './plugins/utils/index.ts';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages,\n    ensureRxCollectionIsNotDestroyed\n} from './rx-collection-helper.ts';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query.ts';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error.ts';\nimport type {\n    RxMigrationState\n} from './plugins/migration-schema/index.ts';\nimport {\n    DocumentCache,\n    mapDocumentsDataToCacheDocs\n} from './doc-cache.ts';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache.ts';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer.ts';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks.ts';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex,\n    MigrationStrategies\n} from './types/index.d.ts';\n\nimport {\n    RxSchema\n} from './rx-schema.ts';\n\nimport {\n    createNewRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge.ts';\nimport {\n    getWrappedStorageInstance,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper.ts';\nimport { defaultConflictHandler } from './replication-protocol/index.ts';\nimport { IncrementalWriteQueue } from './incremental-write.ts';\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\nimport { overwritable } from './overwritable.ts';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; },\n    Reactivity = any\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: MigrationStrategies = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public checkpoint$: Observable<any> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n    */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public onRemove: (() => MaybePromise<any>)[] = [];\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        const collectionEventBulks$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n        );\n        this.$ = collectionEventBulks$.pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this.checkpoint$ = collectionEventBulks$.pipe(\n            map(changeEventBulk => changeEventBulk.checkpoint),\n        );\n\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\n        let documentConstructor: any;\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.$.pipe(filter(cE => !cE.isLocal)),\n            docData => {\n                if (!documentConstructor) {\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\n                }\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\n            }\n        );\n\n\n        const listenToRemoveSub = this.database.internalStore.changeStream().pipe(\n            filter(bulk => {\n                const key = this.name + '-' + this.schema.version;\n                const found = bulk.events.find(event => {\n                    return (\n                        event.documentData.context === 'collection' &&\n                        event.documentData.key === key &&\n                        event.operation === 'DELETE'\n                    );\n                });\n                return !!found;\n            })\n        ).subscribe(async () => {\n            await this.destroy();\n            await Promise.all(this.onRemove.map(fn => fn()));\n        });\n        this._subs.push(listenToRemoveSub);\n\n\n        /**\n         * TODO Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const events = new Array(eventBulk.events.length);\n            const rawEvents = eventBulk.events;\n            const collectionName = this.name;\n            const deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\n            for (let index = 0; index < rawEvents.length; index++) {\n                const event = rawEvents[index];\n                events[index] = {\n                    documentId: event.documentId,\n                    collectionName,\n                    isLocal: false,\n                    operation: event.operation,\n                    documentData: deepFreezeWhenDevMode(event.documentData) as any,\n                    previousDocumentData: deepFreezeWhenDevMode(event.previousDocumentData) as any\n                };\n            }\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events,\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context,\n                endTime: eventBulk.endTime,\n                startTime: eventBulk.startTime\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    /**\n     * Manually call the cleanup function of the storage.\n     * @link https://rxdb.info/cleanup.html\n     */\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\n        ensureRxCollectionIsNotDestroyed(this);\n        throw pluginMissing('cleanup');\n    }\n\n    // overwritten by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration-schema');\n    }\n    getMigrationState(): RxMigrationState {\n        throw pluginMissing('migration-schema');\n    }\n    startMigration(batchSize: number = 10): Promise<void> {\n        ensureRxCollectionIsNotDestroyed(this);\n        return this.getMigrationState().startMigration(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getMigrationState().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotDestroyed(this);\n        const writeResult = await this.bulkInsert([json as any]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotDestroyed(this);\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n        */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const primaryPath = this.schema.primaryPath;\n\n\n        /**\n         * This code is a bit redundant for better performance.\n         * Instead of iterating multiple times,\n         * we directly transform the input to a write-row array.\n         */\n        let insertRows: BulkWriteRow<RxDocumentType>[];\n        if (this.hasHooks('pre', 'insert')) {\n            insertRows = await Promise.all(\n                docsData.map(docData => {\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n                    return this._runHooks('pre', 'insert', useDocData)\n                        .then(() => {\n                            return { document: useDocData };\n                        });\n                })\n            );\n        } else {\n            insertRows = [];\n            for (let index = 0; index < docsData.length; index++) {\n                const docData = docsData[index];\n                const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n                insertRows[index] = { document: useDocData };\n            }\n        }\n\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(this._docCache, results.success);\n\n        if (this.hasHooks('post', 'insert')) {\n            const docsMap: Map<string, RxDocumentType> = new Map();\n            insertRows.forEach(row => {\n                const doc = row.document;\n                docsMap.set((doc as any)[primaryPath] as any, doc);\n            });\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: results.error\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotDestroyed(this);\n        const primaryPath = this.schema.primaryPath;\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids).exec();\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = results.success.map(d => d[primaryPath] as string);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\n\n        return {\n            success: rxDocuments,\n            error: results.error\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotDestroyed(this);\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        const success = insertResult.success.slice(0);\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\n\n        // update the ones that existed already\n        await Promise.all(\n            insertResult.error.map(async (err) => {\n                if (err.status !== 409) {\n                    error.push(err);\n                } else {\n                    const id = err.documentId;\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\n                    const newDoc = await doc.incrementalModify(() => writeData);\n                    success.push(newDoc);\n                }\n            })\n        );\n        return {\n            error,\n            success\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotDestroyed(this);\n        const bulkResult = await this.bulkUpsert([json]);\n        throwIfIsStorageWriteError<RxDocumentType>(\n            this.asRxCollection,\n            (json as any)[this.schema.primaryPath],\n            json as any,\n            bulkResult.error[0]\n        );\n        return bulkResult.success[0];\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotDestroyed(this);\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[],\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotDestroyed(this);\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotDestroyed(this);\n\n        // TODO move this check to dev-mode plugin\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n\n            // cannot have limit on findOne queries because it will be overwritten\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            queryObj = flatClone(queryObj);\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotDestroyed(this);\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<\n        RxDocumentType,\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotDestroyed(this);\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        /**\n         * Performance shortcut\n         * so that we not have to build the empty object.\n         */\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return false;\n        }\n\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        if (!this.hasHooks(when, key)) {\n            return;\n        }\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n\n        await Promise.all(this.onDestroy.map(fn => fn()));\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await Promise.all(this.onRemove.map(fn => fn()));\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.password,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password,\n        devMode: overwritable.isDevMode()\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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","ignoreList":[]}