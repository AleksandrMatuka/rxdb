{"version":3,"file":"rx-storage-instance-memory.js","names":["_rxjs","require","_customIndex","_rxSchemaHelper","_rxStorageHelper","_utils","_binarySearchBounds","_memoryHelper","_memoryIndexes","_rxQueryHelper","RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensureNotRemoved","documentsById","documents","success","error","categorized","categorizeBulkWriteRows","errors","stateByIndex","Object","values","byIndex","bulkInsertDocs","i","length","writeRow","docId","document","putWriteRowToState","undefined","bulkUpdateDocs","get","attachments","attachmentsMap","attachmentsAdd","forEach","attachment","set","attachmentMapKey","documentId","attachmentId","writeData","attachmentData","digest","attachmentsUpdate","attachmentsRemove","delete","eventBulk","events","lastState","ensureNotFalsy","newestRow","checkpoint","id","lwt","_meta","changes$","next","Promise","resolve","findDocumentsById","docIds","withDeleted","ret","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","inclusiveStart","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","inclusiveEnd","indexName","getMemoryIndexName","docsWithIndex","indexOfLower","boundGE","boundGT","indexString","compareDocsWithIndex","indexOfUpper","boundLE","boundLT","rows","done","currentRow","currentDoc","doc","push","sortComparator","getSortComparator","sort","slice","count","result","mode","getChangedDocumentsSince","sinceLwt","RX_META_LWT_MINIMUM","sinceId","lastDoc","lastOfArray","cleanup","minimumDeletedTime","maxDeletionTime","now","removeDocFromState","PROMISE_RESOLVE_TRUE","getAttachmentData","data","getFromMapOrThrow","Error","changeStream","asObservable","remove","removed","collectionStates","getMemoryCollectionKey","version","close","reject","refCount","PROMISE_RESOLVE_VOID","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","exports","createMemoryStorageInstance","params","collectionKey","Map","Subject","addIndexesToInternalsState","instance"],"sources":["../../../../src/plugins/storage-memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    EventBulk,\n    QueryMatcher,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageWriteError,\n    StringKeys\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM\n} from '../../plugins/utils';\nimport {\n    boundGE,\n    boundGT,\n    boundLE,\n    boundLT\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n        const internals = this.internals;\n        const documentsById = this.internals.documents;\n        const primaryPath = this.primaryPath;\n\n        const success: RxDocumentDataById<RxDocType> = {};\n        let error: ById<RxStorageWriteError<RxDocType>> = {};\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            primaryPath as any,\n            documentsById,\n            documentWrites,\n            context\n        );\n        error = categorized.errors;\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        const bulkInsertDocs = categorized.bulkInsertDocs;\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\n            const writeRow = bulkInsertDocs[i];\n            const docId = writeRow.document[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n            success[docId as any] = writeRow.document;\n        }\n\n        const bulkUpdateDocs = categorized.bulkUpdateDocs;\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\n            const writeRow = bulkUpdateDocs[i];\n            const docId = writeRow.document[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                internals,\n                stateByIndex,\n                writeRow,\n                documentsById.get(docId as any)\n            );\n            success[docId as any] = writeRow.document;\n        }\n\n        /**\n         * Handle attachments\n         */\n        if (this.schema.attachments) {\n            const attachmentsMap = internals.attachments;\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentsMap.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    {\n                        writeData: attachment.attachmentData,\n                        digest: attachment.digest\n                    }\n                );\n            });\n            if (this.schema.attachments) {\n                categorized.attachmentsUpdate.forEach(attachment => {\n                    attachmentsMap.set(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                        {\n                            writeData: attachment.attachmentData,\n                            digest: attachment.digest\n                        }\n                    );\n                });\n                categorized.attachmentsRemove.forEach(attachment => {\n                    attachmentsMap.delete(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                    );\n                });\n            }\n        }\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            internals.changes$.next(categorized.eventBulk);\n        }\n        return Promise.resolve({ success, error });\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const documentsById = this.internals.documents;\n        const ret: RxDocumentDataById<RxDocType> = {};\n        for (let i = 0; i < docIds.length; ++i) {\n            const docId = docIds[i];\n            const docInDb = documentsById.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        }\n        return Promise.resolve(ret);\n    }\n\n    query(\n        preparedQuery: MemoryPreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n        if (!queryPlan.selectorSatisfiedByIndex) {\n            queryMatcher = getQueryMatcher(\n                this.schema,\n                preparedQuery.query\n            );\n        }\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound,\n            queryPlan.inclusiveStart\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound,\n            queryPlan.inclusiveEnd\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        let indexOfLower = (queryPlan.inclusiveStart ? boundGE : boundGT)(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n        const indexOfUpper = (queryPlan.inclusiveEnd ? boundLE : boundLT)(\n            docsWithIndex,\n            {\n                indexString: upperBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentRow = docsWithIndex[indexOfLower];\n            if (\n                !currentRow ||\n                indexOfLower > indexOfUpper\n            ) {\n                break;\n            }\n            const currentDoc = currentRow.doc;\n\n            if (!queryMatcher || queryMatcher(currentDoc)) {\n                rows.push(currentDoc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            const sortComparator = getSortComparator(this.schema, preparedQuery.query);\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    async count(\n        preparedQuery: MemoryPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ],\n            false\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        const lastDoc = lastOfArray(rows);\n        return Promise.resolve({\n            documents: rows,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        });\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ],\n            false\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(\n        documentId: string,\n        attachmentId: string,\n        digest: string\n    ): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        if (\n            !digest ||\n            data.digest !== digest\n        ) {\n            throw new Error('attachment does not exist');\n        }\n        return Promise.resolve(data.writeData.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.internals.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(\n                this.databaseName,\n                this.collectionName,\n                this.schema.version\n            )\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n\n        this.internals.refCount = this.internals.refCount - 1;\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(\n        params.databaseName,\n        params.collectionName,\n        params.schema.version\n    );\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject(),\n            changes$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}