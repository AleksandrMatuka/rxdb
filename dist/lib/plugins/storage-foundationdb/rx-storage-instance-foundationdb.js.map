{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["_rxjs","require","_rxSchemaHelper","_rxStorageHelper","_foundationdbHelpers","_customIndex","_utils","_foundationdbQuery","_queryPlanner","_storageMemory","RxStorageInstanceFoundationDB","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","dbs","dbsPromise","categorized","result","root","doTransaction","tx","ret","success","error","ids","map","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","Promise","all","id","doc","get","set","categorizeBulkWriteRows","errors","bulkInsertDocs","forEach","writeRow","docId","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","ensureNotFalsy","previous","newIndexString","delete","attachmentsAdd","attachment","attachmentMapKey","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","newestRow","checkpoint","lwt","_meta","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","queryFoundationDB","count","documents","mode","getAttachmentData","data","getChangedDocumentsSince","limit","keySelector","StreamingMode","index","indexName","getFoundationDBIndexName","lowerBoundString","checkpointPartialDoc","innerResult","range","getRangeAll","firstGreaterThan","INDEX_MAX","streamingMode","Exact","docIds","docsData","concat","lastDoc","lastOfArray","changeStream","asObservable","remove","clearRange","PROMISE_RESOLVE_VOID","close","cleanup","minimumDeletedTime","maxDeletionTime","now","CLEANUP_INDEX","getStartIndexStringFromLowerBound","upperBoundString","getStartIndexStringFromUpperBound","noMoreUndeleted","batchSize","pop","indexMetaInner","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","reject","Error","complete","exports","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","dir","createOrOpen","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","push","useIndexesFinal","indexAr","toArray","unshift","indexDB","getIndexableStringMonad","instance","resolve"],"sources":["../../../../src/plugins/storage-foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBPreparedQuery,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper';\nimport {\n\n    CLEANUP_INDEX,\n    getFoundationDBIndexName\n} from './foundationdb-helpers';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport {\n    ensureNotFalsy,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_VOID,\n    toArray\n} from '../../plugins/utils';\nimport { queryFoundationDB } from './foundationdb-query';\nimport { INDEX_MAX } from '../../query-planner';\nimport { attachmentMapKey } from '../storage-memory';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        const result = await dbs.root.doTransaction(async (tx: any) => {\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: {},\n                error: {}\n            };\n\n            const ids = documentWrites.map(row => (row.document as any)[this.primaryPath]);\n            const mainTx = tx.at(dbs.main.subspace);\n            const attachmentTx = tx.at(dbs.attachments.subspace);\n            const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n            /**\n             * TODO this might be faster if fdb\n             * any time adds a bulk-fetch-by-key method.\n             */\n            await Promise.all(\n                ids.map(async (id) => {\n                    const doc = await mainTx.get(id);\n                    docsInDB.set(id, doc);\n                })\n            );\n\n\n            categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                this.primaryPath as any,\n                docsInDB,\n                documentWrites,\n                context\n            );\n\n            ret.error = categorized.errors;\n\n            // INSERTS\n            categorized.bulkInsertDocs.forEach(writeRow => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n                ret.success[docId] = writeRow.document as any;\n\n                // insert document data\n                mainTx.set(docId, writeRow.document);\n\n                // insert secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                    const indexTx = tx.at(indexMeta.db.subspace);\n                    indexTx.set(indexString, docId);\n                });\n            });\n            // UPDATES\n            categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n\n                // overwrite document data\n                mainTx.set(docId, writeRow.document);\n\n                // update secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                    const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                    if (oldIndexString !== newIndexString) {\n                        const indexTx = tx.at(indexMeta.db.subspace);\n                        indexTx.delete(oldIndexString);\n                        indexTx.set(newIndexString, docId);\n                    }\n                });\n                ret.success[docId] = writeRow.document as any;\n            });\n\n            // attachments\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsUpdate.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsRemove.forEach(attachment => {\n                attachmentTx.delete(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                );\n            });\n\n            return ret;\n        });\n        categorized = ensureNotFalsy(categorized);\n        /**\n         * The events must be emitted AFTER the transaction\n         * has finished.\n         * Otherwise an observable changestream might cause a read\n         * to a document that does not already exist outside of the transaction.\n         */\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n        return result;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret[docId] = docInDb;\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: FoundationDBPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async count(\n        preparedQuery: FoundationDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2022), FoundationDB does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/apple/foundationdb/issues/5981\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const dbs = await this.internals.dbsPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n        }\n        const result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n            let innerResult: RxDocumentData<RxDocType>[] = [];\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                INDEX_MAX,\n                {\n                    limit,\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(\n                docIds.map((docId: string) => mainTx.get(docId))\n            );\n            innerResult = innerResult.concat(docsData);\n            return innerResult;\n        });\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMetaInner => {\n                    const subIndexDB = tx.at(indexMetaInner.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMetaInner.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        const dbs = await this.internals.dbsPromise;\n        dbs.root.close();\n\n        // TODO shouldn't we close the index databases?\n        // Object.values(dbs.indexes).forEach(db => db.close());\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType>; } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = toArray(index);\n            indexAr.unshift('_deleted');\n            return indexAr;\n        });\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}