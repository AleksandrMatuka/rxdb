{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","defaultHashSha256","ensureNotFalsy","firstPropertyValueOfObject","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","randomCouchString","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","writeSingle","instance","writeRow","context","writeResult","bulkWrite","Object","keys","error","length","ret","success","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","previousDocumentData","eventId","collectionName","name","undefined","startTime","endTime","operation","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","writeError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changeByDocId","Map","eventBulkId","eventBulk","events","checkpoint","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","docsByIdIsMap","get","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","docId","document","documentInDb","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","_meta","lwt","event","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","previous","set","revInDb","_rev","err","updatedRow","find","previousAttachmentData","newDigest","writeDoc","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","getWrappedStorageInstance","database","rxJsonSchema","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","metaFieldName","hasOwnProperty","dataBefore","dataAfter","token","originalStorageInstance","internals","databaseName","options","rows","toStorageWriteRows","map","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    ById,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment\n} from './types';\nimport {\n    createRevision,\n    defaultHashSha256,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This can be a Map for better performance\n     * but it can also be an object because some storages\n     * need to work with something that is JSON-stringify-able\n     * and we do not want to transform a big object into a Map\n     * each time we use it.\n     */\n    docsInDb:\n        Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>> |\n        ById<RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: ById<RxStorageWriteError<RxDocType>> = {};\n    const changeByDocId = new Map<string, RxStorageChangeEvent<RxDocumentData<RxDocType>>>();\n    const eventBulkId = randomCouchString(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context\n    };\n    const eventBulkEvents = eventBulk.events;\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n        digest: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n\n\n    const startTime = now();\n\n    const docsByIdIsMap = typeof docsInDb.get === 'function';\n    const hasDocsInDb = docsByIdIsMap ? (docsInDb as Map<any, any>).size > 0 : Object.keys(docsInDb).length > 0;\n\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n        const docId = writeRow.document[primaryPath] as string;\n        let documentInDb: RxDocumentData<RxDocType> | false = false;\n        if (hasDocsInDb) {\n            documentInDb = docsByIdIsMap ? (docsInDb as any).get(docId) : (docsInDb as any)[docId];\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            if (hasAttachments) {\n                Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                    if (\n                        !(attachmentData as RxAttachmentWriteData).data\n                    ) {\n                        attachmentError = {\n                            documentId: docId,\n                            isError: true,\n                            status: 510,\n                            writeRow,\n                            attachmentId\n                        };\n                        errors[docId] = attachmentError;\n                    } else {\n                        attachmentsAdd.push({\n                            documentId: docId,\n                            attachmentId,\n                            attachmentData: attachmentData as any,\n                            digest: defaultHashSha256((attachmentData as RxAttachmentWriteData).data)\n                        });\n                    }\n                });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                }\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < writeRow.document._meta.lwt\n                ) {\n                    newestRow = writeRow as any;\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                const event = {\n                    eventId: getUniqueDeterministicEventKey(\n                        eventBulkId,\n                        rowId,\n                        docId,\n                        writeRow\n                    ),\n                    documentId: docId,\n                    operation: 'INSERT' as const,\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document as any,\n                    previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous as any,\n                    startTime,\n                    endTime: now()\n                };\n                changeByDocId.set(docId, event);\n                eventBulkEvents.push(event);\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors[docId] = err;\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (writeRow.document._deleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (writeRow.previous) {\n                        Object\n                            .keys(writeRow.previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId,\n                                    digest: ensureNotFalsy(writeRow.previous)._attachments[attachmentId].digest\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(writeRow.document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any,\n                                        digest: defaultHashSha256((attachmentData as RxAttachmentWriteData).data)\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\n                                            digest: defaultHashSha256((attachmentData as RxAttachmentWriteData).data)\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors[docId] = attachmentError;\n            } else {\n                bulkUpdateDocs.push(updatedRow);\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < updatedRow.document._meta.lwt\n                ) {\n                    newestRow = updatedRow as any;\n                }\n            }\n\n            const writeDoc = writeRow.document;\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n                previousEventDocumentData = writeRow.previous;\n            } else if (writeDoc._deleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(writeRow.document) as any;\n                previousEventDocumentData = writeRow.previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            const event = {\n                eventId: getUniqueDeterministicEventKey(\n                    eventBulkId,\n                    rowId,\n                    docId,\n                    writeRow\n                ),\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation,\n                startTime,\n                endTime: now()\n            };\n            changeByDocId.set(docId, event);\n            eventBulkEvents.push(event);\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        changeByDocId,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        digest: defaultHashSha256(data),\n        length: getAttachmentSize(data),\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates\n * even on flattened eventBulks\n */\nexport function getUniqueDeterministicEventKey(\n    eventBulkId: string,\n    rowId: number,\n    docId: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    return eventBulkId + '|' + rowId + '|' + docId + '|' + writeRow.document._rev;\n}\n\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.token,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        }) as any;\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string,\n            digest: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n    if (\n        params.schema.attachments &&\n        params.schema.attachments.compression\n    ) {\n        throw newRxError('UT7', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}