{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","defaultHashSha256","ensureNotFalsy","firstPropertyValueOfObject","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","randomCouchString","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","writeSingle","instance","writeRow","context","writeResult","bulkWrite","Object","keys","error","length","ret","success","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","previousDocumentData","eventId","collectionName","name","undefined","startTime","endTime","operation","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","writeError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulkId","eventBulk","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","docsByIdIsMap","get","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","docId","document","documentInDb","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","_meta","lwt","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","previous","revInDb","_rev","err","updatedRow","find","previousAttachmentData","newDigest","digest","writeDoc","eventDocumentData","previousEventDocumentData","args","_ret","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","getWrappedStorageInstance","database","rxJsonSchema","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","metaFieldName","hasOwnProperty","dataBefore","dataAfter","token","originalStorageInstance","internals","databaseName","options","rows","toStorageWriteRows","map","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    ById,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment\n} from './types';\nimport {\n    createRevision,\n    defaultHashSha256,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This can be a Map for better performance\n     * but it can also be an object because some storages\n     * need to work with something that is JSON-stringify-able\n     * and we do not want to transform a big object into a Map\n     * each time we use it.\n     */\n    docsInDb:\n        Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>> |\n        ById<RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: ById<RxStorageWriteError<RxDocType>> = {};\n    const changedDocumentIds: RxDocType[StringKeys<RxDocType>][] = [];\n    const eventBulkId = randomCouchString(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n\n    const docsByIdIsMap = typeof docsInDb.get === 'function';\n    const hasDocsInDb = docsByIdIsMap ? (docsInDb as Map<any, any>).size > 0 : Object.keys(docsInDb).length > 0;\n\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n        const docId = writeRow.document[primaryPath] as string;\n        let documentInDb: RxDocumentData<RxDocType> | false = false;\n        if (hasDocsInDb) {\n            documentInDb = docsByIdIsMap ? (docsInDb as any).get(docId) : (docsInDb as any)[docId];\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            if (hasAttachments) {\n                Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                    if (\n                        !(attachmentData as RxAttachmentWriteData).data\n                    ) {\n                        attachmentError = {\n                            documentId: docId,\n                            isError: true,\n                            status: 510,\n                            writeRow,\n                            attachmentId\n                        };\n                        errors[docId] = attachmentError;\n                    } else {\n                        attachmentsAdd.push({\n                            documentId: docId,\n                            attachmentId,\n                            attachmentData: attachmentData as any\n                        });\n                    }\n                });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                }\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < writeRow.document._meta.lwt\n                ) {\n                    newestRow = writeRow as any;\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(docId as any);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(\n                        eventBulkId,\n                        rowId,\n                        docId,\n                        writeRow\n                    ),\n                    documentId: docId,\n                    operation: 'INSERT',\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document as any,\n                    previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous as any,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors[docId] = err;\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (writeRow.document._deleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (writeRow.previous) {\n                        Object\n                            .keys(writeRow.previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(writeRow.document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors[docId] = attachmentError;\n            } else {\n                bulkUpdateDocs.push(updatedRow);\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < updatedRow.document._meta.lwt\n                ) {\n                    newestRow = updatedRow as any;\n                }\n            }\n\n            const writeDoc = writeRow.document;\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n                previousEventDocumentData = writeRow.previous;\n            } else if (writeDoc._deleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(writeRow.document) as any;\n                previousEventDocumentData = writeRow.previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            changedDocumentIds.push(docId as any);\n            eventBulk.events.push({\n                eventId: getUniqueDeterministicEventKey(\n                    eventBulkId,\n                    rowId,\n                    docId,\n                    writeRow\n                ),\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation,\n                startTime,\n                endTime: now()\n            });\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        digest: defaultHashSha256(data),\n        length: getAttachmentSize(data),\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates\n * even on flattened eventBulks\n */\nexport function getUniqueDeterministicEventKey(\n    eventBulkId: string,\n    rowId: number,\n    docId: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    return eventBulkId + '|' + rowId + '|' + docId + '|' + writeRow.document._rev;\n}\n\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.token,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        }) as any;\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}