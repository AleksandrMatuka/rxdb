{"version":3,"file":"index.js","names":["ensureNotFalsy","errorToPlainJson","flatClone","lastOfArray","doc","query","where","orderBy","limit","getDocs","onSnapshot","runTransaction","writeBatch","serverTimestamp","waitForPendingWrites","documentId","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","getSchemaByObjectPath","newRxError","Subject","firestoreRowToDocData","FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX","getContentByIds","isoStringToServerTimestamp","serverTimestampToIsoString","stripPrimaryKey","stripServerTimestampField","RxFirestoreReplicationState","firestore","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","replicateFirestore","options","pullStream$","replicationPrimitivesPull","waitForLeadership","serverTimestampField","primaryPath","schema","schemaPart","jsonSchema","includes","field","handler","lastPulledCheckpoint","batchSize","newerQuery","sameTimeQuery","lastServerTimestamp","id","mustsReRun","useDocs","database","_tx","newerQueryResult","sameTimeQueryResult","Promise","all","undefined","metadata","hasPendingWrites","docs","missingAmount","length","additonalDocs","slice","filter","x","concat","checkpoint","documents","lastDoc","map","row","newCheckpoint","data","ret","modifier","stream$","asObservable","replicationPrimitivesPush","rows","writeRowsById","docIds","docId","newDocumentState","conflicts","getQuery","ids","docsInDbResult","docsInDbById","forEach","docDataInDb","batch","hasWrite","Object","entries","writeRow","docInDb","assumedMasterState","conflictHandler","realMasterState","isEqual","docRef","writeDocData","set","update","commit","replicationState","hashFunction","projectId","startBefore","start","bind","cancelBefore","cancel","lastChangeQuery","unsubscribe","_querySnapshot","reSync","error","subjects","next"],"sources":["../../../../src/plugins/replication-firestore/index.ts"],"sourcesContent":["import {\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    lastOfArray\n} from '../../plugins/utils';\n\nimport {\n    doc,\n    query,\n    where,\n    orderBy,\n    limit,\n    getDocs,\n    onSnapshot,\n    runTransaction,\n    writeBatch,\n    serverTimestamp,\n    QueryDocumentSnapshot,\n    waitForPendingWrites,\n    documentId\n} from 'firebase/firestore';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    ById,\n    getSchemaByObjectPath,\n    newRxError,\n    WithDeleted\n} from '../../';\n\nimport type {\n    FirestoreCheckpointType,\n    FirestoreOptions,\n    SyncOptionsFirestore\n} from './firestore-types';\nimport { Subject } from 'rxjs';\nimport {\n    firestoreRowToDocData,\n    FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    getContentByIds,\n    isoStringToServerTimestamp,\n    serverTimestampToIsoString,\n    stripPrimaryKey,\n    stripServerTimestampField\n} from './firestore-helper';\n\nexport * from './firestore-helper';\nexport * from './firestore-types';\n\nexport class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {\n    constructor(\n        public readonly firestore: FirestoreOptions<RxDocType>,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateFirestore<RxDocType>(\n    options: SyncOptionsFirestore<RxDocType>\n): RxFirestoreReplicationState<RxDocType> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;\n    options.serverTimestampField = serverTimestampField;\n    const primaryPath = collection.schema.primaryPath;\n\n    /**\n     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.\n     */\n    const schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);\n    if (\n        schemaPart ||\n        // also must not be nested.\n        serverTimestampField.includes('.')\n    ) {\n        throw newRxError('RC6', {\n            field: serverTimestampField,\n            schema: collection.schema.jsonSchema\n        });\n    }\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: FirestoreCheckpointType,\n                batchSize: number\n            ) {\n                let newerQuery: ReturnType<typeof query>;\n                let sameTimeQuery: ReturnType<typeof query> | undefined;\n\n                if (lastPulledCheckpoint) {\n                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);\n                    newerQuery = query(options.firestore.collection,\n                        where(serverTimestampField, '>', lastServerTimestamp),\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                    sameTimeQuery = query(options.firestore.collection,\n                        where(serverTimestampField, '==', lastServerTimestamp),\n                        where(primaryPath, '>', lastPulledCheckpoint.id),\n                        orderBy(primaryPath, 'asc'),\n                        limit(batchSize)\n                    );\n                } else {\n                    newerQuery = query(options.firestore.collection,\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                }\n\n                let mustsReRun = true;\n                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];\n                while (mustsReRun) {\n                    /**\n                     * Local writes that have not been persisted to the server\n                     * are in pending state and do not have a correct serverTimestamp set.\n                     * We have to ensure we only use document states that are in sync with the server.\n                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b\n                     */\n                    await waitForPendingWrites(options.firestore.database);\n                    await runTransaction(options.firestore.database, async (_tx) => {\n                        useDocs = [];\n                        const [\n                            newerQueryResult,\n                            sameTimeQueryResult\n                        ] = await Promise.all([\n                            getDocs(newerQuery),\n                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined\n                        ]);\n\n                        if (\n                            newerQueryResult.metadata.hasPendingWrites ||\n                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)\n                        ) {\n                            return;\n                        } else {\n                            mustsReRun = false;\n\n                            if (sameTimeQuery) {\n                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;\n                            }\n                            const missingAmount = batchSize - useDocs.length;\n                            if (missingAmount > 0) {\n                                const additonalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);\n                                useDocs = useDocs.concat(additonalDocs as any);\n                            }\n                        }\n                    });\n                }\n\n                if (useDocs.length === 0) {\n                    return {\n                        checkpoint: lastPulledCheckpoint,\n                        documents: []\n                    };\n                }\n                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));\n                const documents: WithDeleted<RxDocType>[] = useDocs\n                    .map(row => firestoreRowToDocData(\n                        serverTimestampField,\n                        primaryPath,\n                        row\n                    ));\n                const newCheckpoint: FirestoreCheckpointType = {\n                    id: lastDoc.id,\n                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())\n                };\n                const ret = {\n                    documents: documents,\n                    checkpoint: newCheckpoint\n                };\n                return ret;\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n                const docIds: string[] = rows.map(row => {\n                    const docId = (row.newDocumentState as any)[primaryPath];\n                    writeRowsById[docId] = row;\n                    return docId;\n                });\n                await waitForPendingWrites(options.firestore.database);\n                let conflicts: WithDeleted<RxDocType>[] = [];\n\n                /**\n                 * Everything must run INSIDE of the transaction\n                 * because on tx-errors, firebase will re-run the transaction on some cases.\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions\n                 */\n                await runTransaction(options.firestore.database, async (_tx) => {\n                    conflicts = []; // reset in case the tx has re-run.\n                    /**\n                     * @link https://stackoverflow.com/a/48423626/3443137\n                     */\n\n                    const getQuery = (ids: string[]) => {\n                        return getDocs(\n                            query(\n                                options.firestore.collection,\n                                where(documentId(), 'in', ids)\n                            )\n                        );\n                    };\n\n                    const docsInDbResult = await getContentByIds<RxDocType>(docIds, getQuery);\n\n                    const docsInDbById: ById<RxDocType> = {};\n                    docsInDbResult.forEach(row => {\n                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());\n                        const docId = row.id;\n                        (docDataInDb as any)[primaryPath] = docId;\n                        docsInDbById[docId] = docDataInDb;\n                    });\n\n                    /**\n                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n                     */\n                    const batch = writeBatch(options.firestore.database);\n                    let hasWrite = false;\n                    await Promise.all(\n                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {\n                            const docInDb: RxDocType | undefined = docsInDbById[docId];\n\n                            if (\n                                docInDb &&\n                                (\n                                    !writeRow.assumedMasterState ||\n                                    (await collection.conflictHandler({\n                                        newDocumentState: docInDb as any,\n                                        realMasterState: writeRow.assumedMasterState\n                                    }, 'replication-firestore-push')).isEqual === false\n                                )\n                            ) {\n                                // conflict\n                                conflicts.push(docInDb as any);\n                            } else {\n                                // no conflict\n                                hasWrite = true;\n                                const docRef = doc(options.firestore.collection, docId);\n                                const writeDocData = flatClone(writeRow.newDocumentState);\n                                (writeDocData as any)[serverTimestampField] = serverTimestamp();\n                                if (!docInDb) {\n                                    // insert\n                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                } else {\n                                    // update\n                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                }\n                            }\n                        })\n                    );\n\n                    if (hasWrite) {\n                        await batch.commit();\n                    }\n                });\n                await waitForPendingWrites(options.firestore.database);\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxFirestoreReplicationState<RxDocType>(\n        options.firestore,\n        FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX + options.collection.database.hashFunction(options.firestore.projectId),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const lastChangeQuery = query(\n                options.firestore.collection,\n                orderBy(serverTimestampField, 'desc'),\n                limit(1)\n            );\n            const unsubscribe = onSnapshot(\n                lastChangeQuery,\n                (_querySnapshot) => {\n                    /**\n                     * There is no good way to observe the event stream in firestore.\n                     * So instead we listen to any write to the collection\n                     * and then emit a 'RESYNC' flag.\n                     */\n                    replicationState.reSync();\n                },\n                (error) => {\n                    replicationState.subjects.error.next(\n                        newRxError('RC_STREAM', { error: errorToPlainJson(error) })\n                    );\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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"}