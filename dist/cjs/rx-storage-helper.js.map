{"version":3,"file":"rx-storage-helper.js","names":["_overwritable","require","_rxError","_rxSchemaHelper","_index","_rxjs","INTERNAL_STORAGE_NAME","exports","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","undefined","writeSingle","instance","writeRow","context","writeResult","bulkWrite","error","length","ret","success","observeSingle","firstFindPromise","changeStream","pipe","map","evBulk","events","find","ev","filter","Promise","resolve","ensureNotFalsy","documentData","startWith","switchMap","v","stackCheckpoints","checkpoints","Object","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","previousDocumentData","eventId","collectionName","name","startTime","endTime","operation","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","newRxError","id","writeError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changeByDocId","Map","eventBulkId","randomCouchString","eventBulk","checkpoint","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","now","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","document","previous","docId","documentInDb","get","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","_meta","lwt","event","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","set","revInDb","_rev","err","updatedRow","keys","previousAttachmentData","newDigest","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatClone","flatCloneDocWithMeta","writeRowDocument","getWrappedStorageInstance","database","rxJsonSchema","getPrimaryFieldOfPrimaryKey","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","fillPrimaryKey","structuredClone","metaFieldName","hasOwnProperty","dataBefore","dataAfter","createRevision","token","originalStorageInstance","internals","databaseName","options","rows","toStorageWriteRows","row","lockedRun","then","useWriteResult","slice","reInsertErrors","reInserts","subResult","appendToArray","query","preparedQuery","count","info","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","getDefaultRxDocumentMeta","getDefaultRevision","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable.ts';\nimport { newRxError } from './rx-error.ts';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment\n} from './types/index.d.ts';\nimport {\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './plugins/utils/index.ts';\nimport { Observable, filter, map, startWith, switchMap } from 'rxjs';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[0];\n    if (doc) {\n        return doc;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (writeResult.error.length > 0) {\n        const error = writeResult.error[0];\n        throw error;\n    } else {\n        const ret = writeResult.success[0];\n        return ret;\n    }\n}\n\n/**\n * Observe the plain document data of a single document.\n * Do not forget to unsubscribe.\n */\nexport function observeSingle<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Observable<RxDocumentData<RxDocType>> {\n    const firstFindPromise = getSingleDocument(storageInstance, documentId);\n    const ret = storageInstance\n        .changeStream()\n        .pipe(\n            map(evBulk => evBulk.events.find(ev => ev.documentId === documentId)),\n            filter(ev => !!ev),\n            map(ev => Promise.resolve(ensureNotFalsy(ev).documentData)),\n            startWith(firstFindPromise),\n            switchMap(v => v),\n            filter(v => !!v)\n        ) as any;\n    return ret;\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType, any, any>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This must be a Map for better performance.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: RxStorageWriteError<RxDocType>[] = [];\n    const changeByDocId = new Map<string, RxStorageChangeEvent<RxDocumentData<RxDocType>>>();\n    const eventBulkId = randomCouchString(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context\n    };\n    const eventBulkEvents = eventBulk.events;\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n        digest: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n\n\n    const startTime = now();\n\n    const hasDocsInDb = docsInDb.size > 0;\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    /**\n     * @performance is really important in this loop!\n     */\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n\n        // use these variables to have less property accesses\n        const document = writeRow.document;\n        const previous = writeRow.previous;\n        const docId = document[primaryPath] as string;\n\n        let documentInDb: RxDocumentData<RxDocType> | undefined = undefined as any;\n        if (hasDocsInDb) {\n            documentInDb = docsInDb.get(docId);\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = document._deleted ? true : false;\n            if (hasAttachments) {\n                Object\n                    .entries(document._attachments)\n                    .forEach(([attachmentId, attachmentData]) => {\n                        if (\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: docId,\n                                isError: true,\n                                status: 510,\n                                writeRow,\n                                attachmentId\n                            };\n                            errors.push(attachmentError);\n                        } else {\n                            attachmentsAdd.push({\n                                documentId: docId,\n                                attachmentId,\n                                attachmentData: attachmentData as any,\n                                digest: attachmentData.digest\n                            });\n                        }\n                    });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                }\n\n                // TODO can we assume the the last row always has the hightes _meta.lwt?\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < document._meta.lwt\n                ) {\n                    newestRow = writeRow as any;\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                const event = {\n                    eventId: getUniqueDeterministicEventKey(\n                        eventBulkId,\n                        rowId,\n                        docId,\n                        writeRow.document\n                    ),\n                    documentId: docId,\n                    operation: 'INSERT' as const,\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any,\n                    previousDocumentData: hasAttachments && previous ? stripAttachmentsDataFromDocument(previous) : previous as any,\n                    // TODO do we even need the startTime and endTime?\n                    // maybe it should be defined per event-bulk, not per each single event\n                    startTime,\n                    endTime: now()\n                };\n                changeByDocId.set(docId, event);\n                eventBulkEvents.push(event);\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !previous\n                ) ||\n                (\n                    !!previous &&\n                    revInDb !== previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (document._deleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (previous) {\n                        Object\n                            .keys(previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId,\n                                    digest: ensureNotFalsy(previous)._attachments[attachmentId].digest\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any,\n                                        digest: attachmentData.digest\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\n                                            digest: attachmentData.digest\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                bulkUpdateDocs.push(updatedRow);\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < updatedRow.document._meta.lwt\n                ) {\n                    newestRow = updatedRow as any;\n                }\n            }\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (previous && previous._deleted && !document._deleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n            } else if (previous && !previous._deleted && !document._deleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n                previousEventDocumentData = previous;\n            } else if (document._deleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(document) as any;\n                previousEventDocumentData = previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            const event = {\n                eventId: getUniqueDeterministicEventKey(\n                    eventBulkId,\n                    rowId,\n                    docId,\n                    document\n                ),\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation,\n                startTime,\n                endTime: now()\n            };\n            changeByDocId.set(docId, event);\n            eventBulkEvents.push(event);\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        changeByDocId,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        length: getAttachmentSize(data),\n        digest: writeData.digest,\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n\n    if (!doc._attachments || Object.keys(doc._attachments).length === 0) {\n        return doc;\n    }\n\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates\n * even on flattened eventBulks\n */\nexport function getUniqueDeterministicEventKey<RxDocType>(\n    eventBulkId: string,\n    rowId: number,\n    docId: string,\n    writeRowDocument: RxDocumentWriteData<RxDocType>\n): string {\n    return eventBulkId + '|' + rowId + '|' + docId + '|' + writeRowDocument._rev;\n}\n\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n\n            /**\n             * Ensure it can be structured cloned\n             */\n            try {\n                structuredClone(writeRow);\n            } catch (err) {\n                throw newRxError('DOC24', {\n                    collection: storageInstance.collectionName,\n                    document: writeRow.document\n                });\n            }\n\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.token,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const useWriteResult: typeof writeResult = {\n                        error: [],\n                        success: writeResult.success.slice(0)\n                    };\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] =\n                        writeResult.error\n                            .filter((error) => {\n                                if (\n                                    error.status === 409 &&\n                                    !error.writeRow.previous &&\n                                    !error.writeRow.document._deleted &&\n                                    ensureNotFalsy(error.documentInDb)._deleted\n                                ) {\n                                    return true;\n                                }\n                                useWriteResult.error.push(error);\n                                return false;\n                            }) as any;\n                    if (reInsertErrors.length > 0) {\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            appendToArray(useWriteResult.error, subResult.error);\n                            appendToArray(useWriteResult.success, subResult.success);\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        info() {\n            return database.lockedRun(\n                () => storageInstance.info()\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string,\n            digest: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n    if (\n        params.schema.attachments &&\n        params.schema.attachments.compression\n    ) {\n        throw newRxError('UT7', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}