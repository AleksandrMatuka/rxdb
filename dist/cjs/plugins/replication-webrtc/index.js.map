{"version":3,"file":"index.js","names":["_rxjs","require","_plugin","_index","_index2","_index3","_index4","_webrtcHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_rxError","_signalingServer","_webrtcTypes","_connectionHandlerSimplePeer","replicateWebRTC","options","collection","addRxPlugin","RxDBLeaderElectionPlugin","pull","batchSize","push","database","multiInstance","waitForLeadership","requestCounter","requestFlag","randomCouchString","getRequestId","count","token","storageToken","pool","RxWebRTCReplicationPool","connectionHandlerCreator","subs","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","filter","data","message","method","send","id","result","connectSub","connect$","canceled","peerToken","tokenResponse","sendMessageAndAwaitAnswer","params","error","newRxError","isMaster","isMasterInWebRTCReplication","hashFunction","replicationState","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicateRxCollection","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","assign","handler","lastPulledCheckpoint","answer","ensureNotFalsy","stream$","response$","m","map","undefined","docs","addPeer","peerStates$","BehaviorSubject","Map","Subject","onDestroy","cancel","rxStorageInstanceToReplicationHandler","storageInstance","conflictHandler","_proto","peerState","getValue","set","getFromMapOrThrow","delete","sub","awaitFirstPeer","firstValueFrom","peerStates","size","Array","from","destroy"],"sources":["../../../../src/plugins/replication-webrtc/index.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    filter,\n    firstValueFrom,\n    map,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol/index.ts';\nimport type {\n    RxCollection,\n    RxError,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxTypeError\n} from '../../types/index.d.ts';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../plugins/utils/index.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport { replicateRxCollection } from '../replication/index.ts';\nimport {\n    isMasterInWebRTCReplication,\n    sendMessageAndAwaitAnswer\n} from './webrtc-helper.ts';\nimport type {\n    WebRTCConnectionHandler,\n    WebRTCPeer,\n    WebRTCPeerState,\n    WebRTCReplicationCheckpoint,\n    WebRTCResponse,\n    RxWebRTCReplicationState,\n    SyncOptionsWebRTC\n} from './webrtc-types.ts';\nimport { newRxError } from '../../rx-error.ts';\n\n\nexport async function replicateWebRTC<RxDocType>(\n    options: SyncOptionsWebRTC<RxDocType>\n): Promise<RxWebRTCReplicationPool<RxDocType>> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    // fill defaults\n    if (options.pull) {\n        if (!options.pull.batchSize) {\n            options.pull.batchSize = 20;\n        }\n    }\n    if (options.push) {\n        if (!options.push.batchSize) {\n            options.push.batchSize = 20;\n        }\n    }\n\n    if (collection.database.multiInstance) {\n        await collection.database.waitForLeadership();\n    }\n\n    // used to easier debug stuff\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const storageToken = await collection.database.storageToken;\n    const pool = new RxWebRTCReplicationPool(\n        collection,\n        options,\n        await options.connectionHandlerCreator(options)\n    );\n\n\n    pool.subs.push(\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\n    );\n\n    /**\n     * Answer if someone requests our storage token\n     */\n    pool.subs.push(\n        pool.connectionHandler.message$.pipe(\n            filter(data => data.message.method === 'token')\n        ).subscribe(data => {\n            pool.connectionHandler.send(data.peer, {\n                id: data.message.id,\n                result: storageToken\n            });\n        })\n    );\n\n    const connectSub = pool.connectionHandler.connect$\n        .pipe(\n            filter(() => !pool.canceled)\n        )\n        .subscribe(async (peer) => {\n            let peerToken: string;\n            /**\n             * TODO ensure both know the correct secret\n             */\n            try {\n                const tokenResponse = await sendMessageAndAwaitAnswer(\n                    pool.connectionHandler,\n                    peer,\n                    {\n                        id: getRequestId(),\n                        method: 'token',\n                        params: []\n                    }\n                );\n                peerToken = tokenResponse.result;\n            } catch (error: any) {\n                /**\n                 * If could not get the tokenResponse,\n                 * just ignore that peer.\n                 */\n                pool.error$.next(newRxError('RC_WEBRTC_PEER', {\n                    error\n                }));\n                return;\n            }\n            const isMaster = await isMasterInWebRTCReplication(collection.database.hashFunction, storageToken, peerToken);\n\n            let replicationState: RxWebRTCReplicationState<RxDocType> | undefined;\n            if (isMaster) {\n                const masterHandler = pool.masterReplicationHandler;\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: WebRTCResponse = {\n                        id: 'masterChangeStream$',\n                        result: ev\n                    };\n                    pool.connectionHandler.send(peer, streamResponse);\n                });\n\n                // clean up the subscription\n                pool.subs.push(\n                    masterChangeStreamSub,\n                    pool.connectionHandler.disconnect$.pipe(\n                        filter(p => p.id === peer.id)\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\n                );\n\n                const messageSub = pool.connectionHandler.message$\n                    .pipe(\n                        filter(data => data.peer.id === peer.id),\n                        filter(data => data.message.method !== 'token')\n                    )\n                    .subscribe(async (data) => {\n                        const { peer: msgPeer, message } = data;\n                        /**\n                         * If it is not a function,\n                         * it means that the client requested the masterChangeStream$\n                         */\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\n                        const result = await (method as any)(...message.params);\n                        const response: WebRTCResponse = {\n                            id: message.id,\n                            result\n                        };\n                        pool.connectionHandler.send(msgPeer, response);\n                    });\n                pool.subs.push(messageSub);\n            } else {\n                replicationState = replicateRxCollection({\n                    replicationIdentifier: [collection.name, options.topic, peerToken].join('||'),\n                    collection: collection,\n                    autoStart: true,\n                    deletedField: '_deleted',\n                    live: true,\n                    retryTime: options.retryTime,\n                    waitForLeadership: false,\n                    pull: options.pull ? Object.assign({}, options.pull, {\n                        async handler(lastPulledCheckpoint: WebRTCReplicationCheckpoint | undefined) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterChangesSince',\n                                    params: [\n                                        lastPulledCheckpoint,\n                                        ensureNotFalsy(options.pull).batchSize\n                                    ],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        },\n                        stream$: pool.connectionHandler.response$.pipe(\n                            filter(m => m.response.id === 'masterChangeStream$'),\n                            map(m => m.response.result)\n                        )\n\n                    }) : undefined,\n                    push: options.push ? Object.assign({}, options.push, {\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterWrite',\n                                    params: [docs],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        }\n                    }) : undefined\n                });\n            }\n            pool.addPeer(peer, replicationState);\n        });\n    pool.subs.push(connectSub);\n    return pool;\n}\n\n\n/**\n * Because the WebRTC replication runs between many instances,\n * we use a Pool instead of returning a single replication state.\n */\nexport class RxWebRTCReplicationPool<RxDocType> {\n\n    peerStates$: BehaviorSubject<Map<WebRTCPeer, WebRTCPeerState<RxDocType>>> = new BehaviorSubject(new Map());\n    canceled: boolean = false;\n    masterReplicationHandler: RxReplicationHandler<RxDocType, WebRTCReplicationCheckpoint>;\n    subs: Subscription[] = [];\n\n    public error$ = new Subject<RxError | RxTypeError>();\n\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly options: SyncOptionsWebRTC<RxDocType>,\n        public readonly connectionHandler: WebRTCConnectionHandler\n    ) {\n        this.collection.onDestroy.push(() => this.cancel());\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\n            collection.storageInstance,\n            collection.conflictHandler,\n            collection.database.token,\n        );\n    }\n\n    addPeer(\n        peer: WebRTCPeer,\n        replicationState?: RxWebRTCReplicationState<RxDocType>\n    ) {\n        const peerState: WebRTCPeerState<RxDocType> = {\n            peer,\n            replicationState,\n            subs: []\n        };\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\n        if (replicationState) {\n            peerState.subs.push(\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\n            );\n        }\n    }\n    removePeer(peer: WebRTCPeer) {\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\n        this.peerStates$.getValue().delete(peer);\n        this.peerStates$.next(this.peerStates$.getValue());\n        peerState.subs.forEach(sub => sub.unsubscribe());\n        if (peerState.replicationState) {\n            peerState.replicationState.cancel();\n        }\n    }\n\n    // often used in unit tests\n    awaitFirstPeer() {\n        return firstValueFrom(\n            this.peerStates$.pipe(\n                filter(peerStates => peerStates.size > 0)\n            )\n        );\n    }\n\n    public async cancel() {\n        if (this.canceled) {\n            return;\n        }\n        this.canceled = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\n            this.removePeer(peer);\n        });\n        await this.connectionHandler.destroy();\n    }\n}\n\nexport * from './webrtc-helper.ts';\nexport * from './signaling-server.ts';\nexport * from './webrtc-types.ts';\n// export * from './connection-handler-webtorrent';\n// export * from './connection-handler-p2pcf';\nexport * from './connection-handler-simple-peer.ts';\n"],"mappings":"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"}